import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
//CommitmentsEdit
//import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

import 'package:ufin/models/commitmet_model.dart';
import 'package:ufin/screens/setup-screens/commitment/new_commitment.dart';

var f = NumberFormat('##,##,###');

class CommitmentsEdit extends StatefulWidget {
  const CommitmentsEdit(
      {super.key, required this.userMailId, required this.newCommitment});

  final String userMailId;
  final List newCommitment;

  @override
  State<CommitmentsEdit> createState() => _CommitmentsEditState();
}

class _CommitmentsEditState extends State<CommitmentsEdit> {
  final _form = GlobalKey<FormState>();

  List<Commitment> newCommitment = [];

  @override
  void initState() {
    _initializeData();
    super.initState();
  }

  void _initializeData() async {
    FirebaseFirestore.instance
        .collection('users Monthly Commitment')
        .doc(widget.userMailId)
        .get()
        .then(
      (DocumentSnapshot doc) {
        setState(
          () {
            var maplist = doc['commitemt'];
            for (var i in maplist) {
              newCommitment = [
                Commitment(
                  title: i['title'],
                  amount: i['amount'],
                  commitType: i['type'],
                  date: i['date'],
                )
              ];
            }
          },
        );
      },
    );
    print('Initialized counter in initState');
  }

  int toggleValue = 0;
  num _lablityCommit = 0;
  num _assetsCommit = 0;

  void openCommitDiglog() {
    showDialog(
      context: context,
      builder: (context) => NewCommitment(onAddCommit: _addCommit),
    );
  }

  void _addCommit(Commitment commit) async {
    List<Map<String, Object>> data = [
      for (var index in widget.newCommitment)
        {
          'title': index['title'],
          'amount': index['amount'],
          'type': index['type'],
          'date': index['date'],
        }
    ];

    data.add({
      'title': commit.title,
      'amount': commit.amount,
      'type': commit.commitType,
      'date': commit.date,
    });
    if (commit.commitType == 'Assets') {
      _assetsCommit += commit.amount;
    } else if (commit.commitType == 'Liability') {
      _lablityCommit += commit.amount;
    }

    await FirebaseFirestore.instance
        .collection('users Monthly Commitment')
        .doc(widget.userMailId)
        .set(
      {
        'commitemt': data,
      },
      SetOptions(merge: true),
    );
  }

  void _removeCommit(Commitment commit) {
    setState(() {
      widget.newCommitment.remove(commit);
      if (commit.commitType == 'Assets') {
        _assetsCommit -= commit.amount;
      } else if (commit.commitType == 'Liability') {
        _lablityCommit -= commit.amount;
      }
    });

    List<Map<String, Object>> val = [];
    val.add(
      {
        'title': commit.title,
        'amount': commit.amount,
        'type': commit.commitType,
        'date': commit.date,
      },
    );

    FirebaseFirestore.instance
        .collection("usersIncomeData")
        .doc(widget.userMailId)
        .update(
      {
        'commitemt': val,
      },
    );
  }

  void summit() async {
    final isValid = _form.currentState!.validate();

    if (!isValid) {
      return;
    }
    Navigator.of(context).pop();
    final db = await FirebaseFirestore.instance
        .collection('usersIncomeData')
        .doc(widget.userMailId)
        .get();

    final _totalIncome = db.data()!['total Incom'];
    print(_totalIncome);

    final balanceBugetBeforSaving =
        _totalIncome - (_assetsCommit + _lablityCommit);
    _form.currentState!.save();

    List<Map<String, Object>> data = [
      for (var index in widget.newCommitment)
        {
          'title': index.title,
          'amount': index.amount,
          'type': index.commitType,
          'date': index.date,
        }
    ];
    print(data);
    await FirebaseFirestore.instance
        .collection('users Monthly Commitment')
        .doc(widget.userMailId)
        .set(
      {
        'lablity commitment': _lablityCommit,
        'assets commitment': _assetsCommit,
        'balance budget befor saving': balanceBugetBeforSaving,
        'total commitments': _assetsCommit + _lablityCommit,
        'commitemt': data
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('UFin'),
      ),
      body: StreamBuilder(
        stream: FirebaseFirestore.instance
            .collection('usersIncomeData')
            .doc(widget.userMailId)
            .snapshots(),
        builder: (context, snapshot) {
          Widget contex = const Center(
            child: CircularProgressIndicator(),
          );
          if (snapshot.hasData) {
            final totalIncome = snapshot.data!['total Incom'] as int;
            contex = StreamBuilder(
              stream: FirebaseFirestore.instance
                  .collection('users Monthly Commitment')
                  .doc(widget.userMailId)
                  .snapshots(),
              builder: (context, snapshot) {
                Widget contex1 = const Center(
                  child: CircularProgressIndicator(),
                );
                //final totalcommit = snapshot.data!['total commitments'];

                num _lablityCommit = snapshot.data!['lablity commitment'];
                num _assetsCommit = snapshot.data!['assets commitment'];

                if (snapshot.hasData) {
                  contex1 = Stack(
                    children: [
                      Align(
                        alignment: Alignment.topCenter,
                        child: LayoutBuilder(
                          builder: (BuildContext context,
                              BoxConstraints constraints) {
                            return Container(
                              height: constraints.maxHeight / 2,
                              width: double.infinity,
                              color: Theme.of(context).colorScheme.secondary,
                            );
                          },
                        ),
                      ),
                      Align(
                        alignment: Alignment.bottomCenter,
                        child: LayoutBuilder(
                          builder: (BuildContext context,
                              BoxConstraints constraints) {
                            return Container(
                              height: constraints.maxHeight / 2,
                              width: double.infinity,
                              color: Theme.of(context)
                                  .colorScheme
                                  .secondaryContainer,
                            );
                          },
                        ),
                      ),
                      Center(
                        child: SingleChildScrollView(
                          child: Container(
                            margin: const EdgeInsets.fromLTRB(2.5, 6, 2.5, 0),
                            child: Card(
                              child: Form(
                                key: _form,
                                child: Padding(
                                  padding:
                                      const EdgeInsets.fromLTRB(0, 12, 0, 12),
                                  child: SizedBox(
                                    height: 500,
                                    width: double.infinity,
                                    child: Column(
                                      children: [
                                        Text(
                                          'Tell us your commintments',
                                          style: Theme.of(context)
                                              .textTheme
                                              .headlineSmall,
                                          textAlign: TextAlign.center,
                                        ),
                                        const SizedBox(height: 15),
                                        Column(
                                          children: [
                                            Row(
                                              children: [
                                                Card(
                                                  color: Theme.of(context)
                                                      .colorScheme
                                                      .onPrimaryContainer,
                                                  child: Padding(
                                                    padding:
                                                        const EdgeInsets.all(
                                                            8.0),
                                                    child: Column(
                                                      children: [
                                                        Text(
                                                          'Monthly Income',
                                                          style: Theme.of(
                                                                  context)
                                                              .textTheme
                                                              .titleMedium!
                                                              .copyWith(
                                                                  color: Theme.of(
                                                                          context)
                                                                      .colorScheme
                                                                      .primaryContainer),
                                                        ),
                                                        Padding(
                                                          padding:
                                                              const EdgeInsets
                                                                  .all(8.0),
                                                          child: Text(
                                                            '₹ ${f.format(totalIncome)}',
                                                            style: Theme.of(
                                                                    context)
                                                                .textTheme
                                                                .titleMedium!
                                                                .copyWith(
                                                                    color: Theme.of(
                                                                            context)
                                                                        .colorScheme
                                                                        .primaryContainer),
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                ),
                                                const Spacer(),
                                                Card(
                                                  color: Theme.of(context)
                                                      .colorScheme
                                                      .onPrimaryContainer,
                                                  child: Padding(
                                                    padding:
                                                        const EdgeInsets.all(
                                                            8.0),
                                                    child: Column(
                                                      children: [
                                                        Text(
                                                          'Commintments',
                                                          style: Theme.of(
                                                                  context)
                                                              .textTheme
                                                              .titleMedium!
                                                              .copyWith(
                                                                  color: Theme.of(
                                                                          context)
                                                                      .colorScheme
                                                                      .primaryContainer),
                                                        ),
                                                        Padding(
                                                          padding:
                                                              const EdgeInsets
                                                                  .all(8.0),
                                                          child: Text(
                                                            '₹${f.format(_assetsCommit + _lablityCommit)}',
                                                            style: Theme.of(
                                                                    context)
                                                                .textTheme
                                                                .titleMedium!
                                                                .copyWith(
                                                                    color: Theme.of(
                                                                            context)
                                                                        .colorScheme
                                                                        .primaryContainer),
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                ),
                                                const Spacer(),
                                                Card(
                                                  color: Theme.of(context)
                                                      .colorScheme
                                                      .onPrimaryContainer,
                                                  child: Padding(
                                                    padding:
                                                        const EdgeInsets.all(
                                                            8.0),
                                                    child: Column(
                                                      children: [
                                                        Text(
                                                          'Balance',
                                                          style: Theme.of(
                                                                  context)
                                                              .textTheme
                                                              .titleMedium!
                                                              .copyWith(
                                                                  color: Theme.of(
                                                                          context)
                                                                      .colorScheme
                                                                      .primaryContainer),
                                                        ),
                                                        Padding(
                                                          padding:
                                                              const EdgeInsets
                                                                  .all(8.0),
                                                          child: Text(
                                                            '₹${f.format(totalIncome - (_assetsCommit + _lablityCommit))}',
                                                            style: Theme.of(
                                                                    context)
                                                                .textTheme
                                                                .titleMedium!
                                                                .copyWith(
                                                                    color: Theme.of(
                                                                            context)
                                                                        .colorScheme
                                                                        .primaryContainer),
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                ),
                                              ],
                                            ),
                                          ],
                                        ),
                                        const SizedBox(height: 20),
                                        Row(
                                          children: [
                                            Text(
                                              'Add a commintment',
                                              style: Theme.of(context)
                                                  .textTheme
                                                  .titleLarge,
                                              textAlign: TextAlign.center,
                                            ),
                                            const Spacer(),
                                            ElevatedButton(
                                              onPressed: () {
                                                openCommitDiglog();
                                              },
                                              style: ElevatedButton.styleFrom(
                                                  backgroundColor:
                                                      Colors.blue[100]),
                                              child: const Icon(Icons.add),
                                            )
                                          ],
                                        ),
                                        SizedBox(
                                            height: 220,
                                            child: ListView.builder(
                                            
                                              itemBuilder: (context, index) =>
                                                  Card(
                                                child: Text(
                                                    newCommitment[index].title),
                                              ),
                                            
                                            )
                                            
                                            // StreamBuilder(
                                            //   stream: FirebaseFirestore.instance
                                            //       .collection(
                                            //           'users Monthly Commitment')
                                            //       .doc(widget.userMailId)
                                            //       .snapshots(),
                                            //   builder: (context, snapshot) {

                                            //     return ListView.builder(
                                            //       itemCount:
                                            //           widget.newCommitment.length,
                                            //       itemBuilder: (context, index) {
                                            //         return Card(
                                            //           color: Theme.of(context)
                                            //               .colorScheme
                                            //               .secondaryContainer,
                                            //           child: Padding(
                                            //             padding:
                                            //                 const EdgeInsets.all(
                                            //                     8.0),
                                            //             child: Row(
                                            //               children: [
                                            //                 Text(
                                            //                   widget.newCommitment[
                                            //                       index]['title'],
                                            //                   style: Theme.of(
                                            //                           context)
                                            //                       .textTheme
                                            //                       .titleMedium,
                                            //                 ),
                                            //                 const Spacer(),
                                            //                 Text(
                                            //                   '₹ ${f.format(widget.newCommitment[index]['amount']).toString()}',
                                            //                   style: Theme.of(
                                            //                           context)
                                            //                       .textTheme
                                            //                       .titleMedium,
                                            //                 ),
                                            //                 const Spacer(),
                                            //                 Column(
                                            //                   children: [
                                            //                     Text(
                                            //                       widget.newCommitment[
                                            //                               index]
                                            //                           ['type'],
                                            //                       style: Theme.of(
                                            //                               context)
                                            //                           .textTheme
                                            //                           .titleMedium,
                                            //                     ),
                                            //                     //const Spacer(),
                                            //                     Text(
                                            //                       '${widget.newCommitment[index]['date'].toString()} every Month',
                                            //                       style: Theme.of(
                                            //                               context)
                                            //                           .textTheme
                                            //                           .titleMedium,
                                            //                     ),
                                            //                   ],
                                            //                 ),
                                            //                 const Spacer(),
                                            //                 IconButton(
                                            //                   onPressed: () =>
                                            //                       _removeCommit(
                                            //                     widget.newCommitment[
                                            //                         index],
                                            //                   ),
                                            //                   icon: const Icon(
                                            //                       Icons.delete),
                                            //                 ),
                                            //               ],
                                            //             ),
                                            //           ),
                                            //         );
                                            //       },
                                            //     );
                                            //   },
                                            // ),
                                            ),
                                        const SizedBox(height: 15),
                                        ElevatedButton(
                                          style: ElevatedButton.styleFrom(
                                            backgroundColor: Theme.of(context)
                                                .colorScheme
                                                .primaryContainer,
                                          ),
                                          onPressed: summit,
                                          child: const Text('Save'),
                                        )
                                      ],
                                    ),
                                  ),
                                ),
                              ),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ); //
                }
                return contex1;
              },
            );
          }
          return contex;
        },
      ),
    );
  }
}


 // List newCommitment =
                                              //     snapshot.data!['commitemt'];

                                              // return ListView(
                                              //   children: List.generate(
                                              //     newCommitment.length,
                                              //     (index) => Card(
                                              //       child: Row(
                                              //         children: [
                                              //           Text(
                                              //             newCommitment[index]['amount']
                                              //                 .toString(),
                                              //           ),
                                              //         ],
                                              //       ),
                                              //     ),
                                              //   ),
                                              // );